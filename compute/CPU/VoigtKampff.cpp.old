#include <cmath>
#include <vector>
#include <iostream>
#include "VoigtKampff.h"
#include <cstdlib>
#include <cstdio>
const double PI = 3.14159265359;
const double SQRTLN2 = 0.832554611;
const double ISQRTPI = 0.564189584; 


double CubicInterpolate(
   double y0,double y1,
   double y2,double y3,
   double mu)
{
   double a0,a1,a2,a3,mu2;

   mu2 = mu*mu;
   a0 = y3 - y2 - y0 + y1;
   a1 = y0 - y1 - a0;
   a2 = y2 - y0;
   a3 = y1;

   return(a0*mu*mu2+a1*mu2+a2*mu+a3);
};

VoigtKampff::VoigtKampff(std::vector<double> pGammaL,double pGammaD,double pRes,double pLorenzCutoff){

	m_Npoints = pLorenzCutoff/pRes + 1;
	m_res=pRes;
	m_gammaD = pGammaD;
	m_lorentz_cutoff = pLorenzCutoff;
	
	std::cout<<"Initializing Voigt....."<<std::endl;
	std::cout<<"Npoints: "<<m_Npoints<<" range : "<< 0.0 << " - "<< double(m_Npoints)*m_res<<std::endl;
	m_gammaL = pGammaL;
	double x,y;
	double nu = 0.0;
	for(int i = 0; i < pGammaL.size(); i++){
		nu = 0.0;
		double gammaL = pGammaL[i];
		m_voigt_grid.push_back(std::vector<double>());	
		m_gamma_mapping[gammaL]=i;
	
		for(int j = 0; j < m_Npoints; j++){	
	
			x = SQRTLN2*nu/pGammaD;
			y = SQRTLN2*gammaL/pGammaD;
		
			m_voigt_grid.back().push_back(humlic(x,y)*SQRTLN2*ISQRTPI/pGammaD);
		
			nu+=m_res;
		}
		std::cout<<"size:"<<m_voigt_grid.back().size()<<std::endl;
	}

	std::cout<<"Done!!!"<<std::endl;



}

double VoigtKampff::ComputeVoigt(double dfreq,int gammaL,double nu){
	
	double dfreq_=fabs(dfreq);
	if(dfreq_ > m_lorentz_cutoff)
		return 0.0;
	int point = fabs(dfreq_)/m_res;
	//point = std::max(point,0);
	//point = std::min(point,m_Npoints);
	
		
		//TODO: Use intepolation 
		/*int i1 = std::max(point-2,0);
		int i2 = std::max(point-1,0);
		int i3 =  std::min(point+2,m_Npoints);
		int i4 = std::min(point+2,m_Npoints);
		double p1=m_voigt_grid[gammaL][i1];
		double p2=m_voigt_grid[gammaL][i2];
		double p3=m_voigt_grid[gammaL][i3];
		double p4=m_voigt_grid[gammaL][i4];
		return CubicInterpolate(p1,p2,p3,p4,dfreq);///ComputeDoppler(dfreq,m_gammaD,nu);
		*/
	double dist = m_gammaD*nu/m_gammaL[gammaL];
	if(dfreq_ < dist) return HumlicekTest(dfreq,m_gammaL[gammaL],nu);
	return m_voigt_grid.at(gammaL).at(point);
		//;
	//return 0.0;
	
}	


double VoigtKampff::ComputeDoppler(double dfreq,double gammaD,double nu){
	
    	 //double dop = 0.03912;//(3155.87/nu)*4.523*(gammaD*nu);
         /*  
         double xp = SQRTLN2/dop*(freq+ m_res/2.0 - nu);
         double xm = SQRTLN2/dop*(freq- m_res/2.0 - nu);
             
         double de = erf(xp)-erf(xm);
        
         return 0.5/m_res*de;
	*/
	
	//double alpha = -1.0/(dop);
	//double de = exp(alpha*dfreq_*dfreq_);
	//double de = (dfreq*dfreq + (dop)*(dop))/(dop*dop*nu) ;
	//return de;
	return (-3.295e-05*dfreq*dfreq*dfreq*dfreq + 2.916e-08*dfreq*dfreq*dfreq 
		+ 0.2924*dfreq*dfreq -6.335e-06*dfreq + 0.02171);


}


	//void Initialize()
double VoigtKampff::ComputeVoigt(double dfreq,double gammaL){
	
	double dfreq_=fabs(dfreq);
	if(dfreq_ > m_lorentz_cutoff)
		return 0.0;
	int point = fabs(dfreq_)/m_res;
	//point = std::max(point,0);
	
	
	if(m_gamma_mapping.count(gammaL) > 0){
		int gamma_idx = m_gamma_mapping[gammaL];
		
		//TODO: Use intepolation 
		/*int i1 = std::max(point-1,0);
		int i2 = point;
		int i3 =  std::min(point+2,m_Npoints);
		int i4 = std::min(point+2,m_Npoints);
		double p1=m_voigt_grid[gamma_idx][i1];
		double p2=m_voigt_grid[gamma_idx][i2];
		double p3=m_voigt_grid[gamma_idx][i3];
		double p4=m_voigt_grid[gamma_idx][i4];
		return CubicInterpolate(p1,p2,p3,p4,dfreq);
		*/
		
		return m_voigt_grid[gamma_idx][point];
		//;
	}
	return 0.0;
	
}



double VoigtKampff::HumlicekTest(double dfreq,double gammaL,double nu){
	double x,y;
	double dfreq_=fabs(dfreq);
	double gammaD = m_gammaD*nu;
	if(dfreq_ > m_lorentz_cutoff)
		return 0.0;
	
	x = SQRTLN2*dfreq_/(gammaD);
	y = SQRTLN2*gammaL/gammaD;
	return humlic(x,y)*SQRTLN2*ISQRTPI/gammaD;
}



